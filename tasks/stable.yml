---
- block:
    - name: Check latest stable rclone version number
      uri:
        url: https://downloads.rclone.org/version.txt
        return_content: true
      register:
        rclone_latest_version
      check_mode: false
    - name: Set variable to latest stable version number
      set_fact:
        rclone_version: "{{ rclone_latest_version.content | replace ('rclone v', '', 1) | trim }}"
  when: rclone_version is undefined

- name: Get rclone stable SHA256SUMS version {{ rclone_version }}
  get_url:
    url: https://downloads.rclone.org/v{{ rclone_version }}/SHA256SUMS
    dest: "{{ rclone_setup_tmp_dir }}"
    force: no

- name: Get rclone stable archive version {{ rclone_version }}
  get_url:
    url: https://downloads.rclone.org/v{{ rclone_version }}/rclone-v{{ rclone_version }}-linux-{{ rclone_arch }}.zip
    dest: "{{ rclone_setup_tmp_dir }}"
    force: no

- name: Do we have the rclone GPG Key?
  shell: gpg --list-keys FBF737ECE9F8AB18604BD2AC93935E02FF3B54FA
  args:
    warn: no
  failed_when: gpg_key.rc not in [0,2]
  register: gpg_key

- name: Get rclone GPG Key if we don't have it
  shell: gpg --recv-keys FBF737ECE9F8AB18604BD2AC93935E02FF3B54FA
  when: gpg_key.rc is defined and gpg_key.rc != 0

- name: Check that SHA256SUMS is signed by the GPG key and that the downloaded archive matches
  shell: sha256sum -c --ignore-missing <(gpg --verify --trust-model always --output=- SHA256SUMS)
  args:
    chdir: "{{ rclone_setup_tmp_dir }}"
    executable: /bin/bash
  when: gpg_key.rc is defined

- name: Extract rclone stable version {{ rclone_version }}
  unarchive:
    src: "{{ rclone_setup_tmp_dir }}/rclone-v{{ rclone_version }}-linux-{{ rclone_arch }}.zip"
    dest: "{{ rclone_setup_tmp_dir }}"
    remote_src: yes
    creates: "{{ rclone_setup_tmp_dir }}/rclone-v{{ rclone_version }}-linux-{{ rclone_arch }}"
  when: not ansible_check_mode
